<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>2ag5網站: <a href="https://mdecd2025.github.io/2a-ag5/"> https://mdecd2025.github.io/2a-ag5/</a></p>
<p>2ag5作業倉儲: <a href="https://github.com/mdecd2025/2a-ag5">https://github.com/mdecd2025/2a-ag5</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>Homework</h1>
<h2>w1</h2>
<p><span>心得：上個禮拜班上多了幾位重補修的學長姊，所以老師從基本的建立個人網站及倉儲開始教起。</span></p>
<h1>Week</h1>
<h2>w5</h2>
<p>6.</p>
<p><strong>在 Webots 中手動建立場景通常包括以下步驟:</strong></p>
<p><strong>1. 創建世界</strong>: 建立一個新的世界，儲存新世界。</p>
<p><strong>2.設置場景的環境</strong>: 設置地面及環境背景。</p>
<p><strong>3.添加物體:</strong> 添加靜、動態物體，調整旋轉物體位置。</p>
<p><strong>4. 配置機器人: </strong>添加機器人，再進行機器人的屬性設置。</p>
<p><strong>5. 設定物理屬性: </strong>點擊「Scene Tree」中的「Physics」選項， 設定物體的重力、質量、摩擦係數、彈性等物理屬性。</p>
<p><strong>6. 設置路徑與物體交互: </strong> 手動設置機器人行駛的路徑；設定物體之間的交互規則。</p>
<p><strong>7.測試與調整: </strong>點擊「<span>Play</span>」按鈕開始模擬運行，檢查場景中的物體和機器人的行為；根據需要調整物理屬性、機器人控制器、場景佈局等。</p>
<p></p><h1>list</h1>
<p>網站:</p>
<p>41223106:<a href="https://mdecd2025.github.io/hw-CYA41223106/">https://mdecd2025.github.io/hw-CYA41223106/</a></p>
<p><span>41223107:<a href="https://mdecd2025.github.io/hw-Lin41223107/"> https://mdecd2025.github.io/hw-Lin41223107/</a></span></p>
<p><span>41223117:<a href="https://mdecd2025.github.io/hw-Manto8/"> https://mdecd2025.github.io/hw-Manto8/</a></span></p>
<p><span>41223121:<a href="https://mdecd2025.github.io/hw-yan21ed/">https://mdecd2025.github.io/hw-yan21ed/</a></span></p>
<p><span>41223126:<a class="Link--inTextBlock" href="https://mdecd2025.github.io/hw-Ren911308/">https://mdecd2025.github.io/hw-Ren911308/</a></span></p>
<p>41223150:<a class="Link--inTextBlock" href="https://mdecd2025.github.io/hw-41223150/">https://mdecd2025.github.io/hw-41223150/</a></p>
<p></p>
<p>倉儲:</p>
<p>41223106:<a href="https://github.com/mdecd2025/hw-CYA41223106">https://github.com/mdecd2025/hw-CYA41223106</a></p>
<p><span>41223107:<a href="https://github.com/mdecd2025/hw-Lin41223107"> https://github.com/mdecd2025/hw-Lin41223107</a></span></p>
<p><span>41223117:<a href="https://github.com/mdecd2025/hw-Manto8">https://github.com/mdecd2025/hw-Manto8</a></span></p>
<p><span>41223121:<a href="https://github.com/mdecd2025/hw-yan21ed">https://github.com/mdecd2025/hw-yan21ed</a></span></p>
<p><span>41223126:<a href="https://github.com/mdecd2025/hw-Ren911308">https://github.com/mdecd2025/hw-Ren911308</a> </span></p>
<p>41223150:<a href="https://github.com/mdecd2025/hw-41223150">https://github.com/mdecd2025/hw-41223150</a></p>
<p></p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>task5</h1>
<p>1.請用繁體中文詳細說明下列資料:<span> </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots </a></p>
<p>2.請整理<span> </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a><span> </span>中重要的英文單字與用法, 並且針對其 中所使用的英文文法逐句說明.</p>
<p>3.請摘要出下列內容: (放入英文文章內容)</p>
<p>4.請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法:</p>
<ul>
<li><strong>Webots</strong> - 一款專業的移動機器人模擬軟體</li>
</ul>
<ul>
<li><em>Example:</em> "Webots is a professional mobile robot simulation software package."</li>
</ul>
<ul>
<li><strong>simulation</strong> - 模擬，指在虛擬環境中再現現實世界的物理特性</li>
</ul>
<ul>
<li><em>Example:</em> "A Webots simulation is composed of following items:"</li>
</ul>
<ul>
<li><strong>prototyping</strong> - 原型製作，通常用於研究或開發階段</li>
</ul>
<ul>
<li><em>Example:</em> "Webots is well suited for research and educational projects related to mobile robotics."</li>
</ul>
<ul>
<li><strong>virtual</strong> - 虛擬的，非實體的</li>
</ul>
<ul>
<li><em>Example:</em> "The user can create 3D virtual worlds with physics properties."</li>
</ul>
<ul>
<li><strong>physics properties</strong> - 物理屬性，如質量、摩擦力等</li>
</ul>
<ul>
<li><em>Example:</em> "3D virtual worlds with physics properties such as mass, joints, friction coefficients, etc."</li>
</ul>
<ul>
<li><strong>mobile robots</strong> - 移動機器人，可以行走、移動或飛行的機器人</li>
</ul>
<ul>
<li><em>Example:</em> "The user can add simple passive objects or active objects called mobile robots."</li>
</ul>
<ul>
<li><strong>locomotion</strong> - 運動方式，例如輪式、腿式或飛行方式</li>
</ul>
<ul>
<li><em>Example:</em> "These robots can have different locomotion schemes (wheeled robots, legged robots, or flying robots)."</li>
</ul>
<ul>
<li><strong>sensor</strong> - 感測器，例如距離感測器、相機、觸碰感測器等</li>
</ul>
<ul>
<li><em>Example:</em> "They may be equipped with a number of sensor and actuator devices."</li>
</ul>
<ul>
<li><strong>actuator</strong> - 執行器，例如馬達、驅動輪等，能讓機器人執行動作</li>
</ul>
<ul>
<li><em>Example:</em> "They may be equipped with a number of sensor and actuator devices."</li>
</ul>
<ul>
<li><strong>controller</strong> - 控制器，負責控制機器人行為的程式</li>
</ul>
<ul>
<li><em>Example:</em> "A controller is a computer program that controls a robot specified in a world file."</li>
</ul>
<ul>
<li><strong>Supervisor Controller</strong> - 主管控制器，擁有更高級的控制權限</li>
</ul>
<ul>
<li><em>Example:</em> "The Supervisor controller is the controller of a Robot whose supervisor field is set to TRUE."</li>
</ul>
<ul>
<li><strong>interface</strong> - 介面，指軟體或硬體之間的互動方式</li>
</ul>
<ul>
<li><em>Example:</em> "Webots also contains a number of interfaces to real mobile robots."</li>
</ul>
<ul>
<li><strong>world</strong> - 世界，在<span>Webots</span>中指包含機器人及環境的<span>3D</span>場景</li>
</ul>
<ul>
<li><em>Example:</em> "A world, in Webots, is a 3D description of the properties of robots and of their environment."</li>
</ul>
<ul>
<li><strong>hierarchical structure</strong> - 階層結構，表示物件之間的組成關係</li>
</ul>
<ul>
<li><em>Example:</em> "Worlds are organized as hierarchical structures where objects can contain other objects."</li>
</ul>
<ul>
<li><strong>VRML97</strong> - 一種<span>3D</span>描述語言，<span>Webots</span>使用它來描述場景</li>
</ul>
<ul>
<li><em>Example:</em> "If you don't want to use existing robot models...you will need a basic knowledge of 3D computer graphics and VRML97 description language."</li>
</ul>
<ul>
<li><strong>plugin</strong> - 外掛程式，可以擴充<span>Webots</span>的功能</li>
</ul>
<ul>
<li><em>Example:</em> "An optional physics plugin that can be used to modify Webots regular physics behavior."</li>
</ul>
<ul>
<li><strong>robot locomotion</strong> - 機器人運動方式，例如四足機器人、仿人機器人等</li>
</ul>
<ul>
<li><em>Example:</em> "Robot locomotion research (legged, humanoids, quadrupeds robots, etc.)."</li>
</ul>
<ul>
<li><strong>multi-agent</strong> - 多智能體，指多個機器人協同工作</li>
</ul>
<ul>
<li><em>Example:</em> "Multi-agent research (swarm intelligence, collaborative mobile robots groups, etc.)."</li>
</ul>
<ul>
<li><strong>adaptive behavior</strong> - 適應性行為，通常涉及<span>AI</span>或機器學習</li>
</ul>
<ul>
<li><em>Example:</em> "Adaptive behavior research (genetic algorithm, neural networks, AI, etc.)."</li>
</ul>
<ul>
<li><strong>genetic algorithm</strong> - 遺傳演算法，一種基於自然選擇的演算法</li>
</ul>
<ul>
<li><em>Example:</em> "Adaptive behavior research (genetic algorithm, neural networks, AI, etc.)."</li>
</ul>
<ul>
<li><strong>neural networks</strong> - 神經網路，一種機器學習模型</li>
</ul>
<ul>
<li><em>Example:</em> "Adaptive behavior research (genetic algorithm, neural networks, AI, etc.)."</li>
</ul>
<ul>
<li><strong>C/C++/Java/Python/MATLAB</strong> - Webots 支援的程式語言</li>
</ul>
<ul>
<li><em>Example:</em> "A basic knowledge of the C, C++, Java, Python or MATLAB programming language is necessary to program your own robot controllers."</li>
</ul>
<ul>
<li><strong>GitHub Issues</strong> - GitHub 的問題回報系統，用來回報<span> Webots </span>錯誤</li>
</ul>
<ul>
<li><em>Example:</em> "GitHub Issues should be used only to report bugs found in Webots."</li>
</ul>
<ul>
<li><strong>Discord</strong> - 一種即時通訊平台，可用來討論<span> Webots</span></li>
</ul>
<ul>
<li><em>Example:</em> "Discord can be used for quick questions and spontaneous discussions with the Webots community."</li>
</ul>
<ul>
<li><strong>byte code</strong> - 位元組碼，<span>Java </span>需先編譯為<span> byte code </span>再由<span> JVM </span>執行</li>
</ul>
<ul>
<li><em>Example:</em> "Java controller need to be compiled to byte code ('.class' files or '.jar') and then interpreted by a Java Virtual Machine."</li>
</ul>
<p>5.請詳細說明如何採手動方式在 Webots 建立下列場景:</p>
<p>6.希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意?</p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>