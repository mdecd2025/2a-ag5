var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 2ag5網站:\xa0  https://mdecd2025.github.io/2a-ag5/ \n 2ag5作業倉儲:\xa0 https://github.com/mdecd2025/2a-ag5 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Homework', 'text': '', 'tags': '', 'url': 'Homework.html'}, {'title': 'w1', 'text': '心得：上個禮拜班上多了幾位重補修的學長姊，所以老師從基本的建立個人網站及倉儲開始教起。 \n \n \n \n', 'tags': '', 'url': 'w1.html'}, {'title': 'list', 'text': '網站: \n 41223106: https://mdecd2025.github.io/hw-CYA41223106/ \n 41223107:  https://mdecd2025.github.io/hw-Lin41223107/ \n 41223117: \xa0https://mdecd2025.github.io/hw-Manto8/ \n 41223121: https://mdecd2025.github.io/hw-yan21ed/ \n 41223126: https://mdecd2025.github.io/hw-Ren911308/ \n 41223150: https://mdecd2025.github.io/hw-41223150/ \n \n 倉儲: \n 41223106: https://github.com/mdecd2025/hw-CYA41223106 \n 41223107:  https://github.com/mdecd2025/hw-Lin41223107 \n 41223117: https://github.com/mdecd2025/hw-Manto8 \n 41223121: https://github.com/mdecd2025/hw-yan21ed \n 41223126: https://github.com/mdecd2025/hw-Ren911308 \xa0 \n 41223150: https://github.com/mdecd2025/hw-41223150 \n \n', 'tags': '', 'url': 'list.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'task5', 'text': '', 'tags': '', 'url': 'task5.html'}, {'title': '1.', 'text': '請用繁體中文詳細說明下列資料 :\xa0 https://cyberbotics.com/doc/guide/introduction-to-webots\xa0 \n', 'tags': '', 'url': '1..html'}, {'title': '2.', 'text': '請整理 \xa0 https://cyberbotics.com/doc/guide/introduction-to-webots \xa0 中重要的英文單字與用法 ,  並且針對其中所使用的英文文法逐句說明 . \n', 'tags': '', 'url': '2..html'}, {'title': '3.', 'text': '請摘要出下列內容 : ( 放入英文文章內容 ) \n Summary of Webots User Guide R2025a \n Introduction to Webots  Webots is a professional mobile robot simulation software designed for rapid prototyping. It allows users to create 3D virtual worlds with physics properties and add mobile robots equipped with sensors and actuators. Users can program these robots individually and even transfer control programs to real-world robots like e-puck, DARwIn-OP, and Nao. \n Capabilities of Webots  Webots is widely used in research and education, supporting: \n \n Mobile robot prototyping (academia, industry, hobbyists) \n Robot locomotion research (legged, humanoid, quadruped robots) \n Multi-agent systems (swarm intelligence, collaborative robots) \n AI and adaptive behavior research (genetic algorithms, neural networks) \n Robotics education (C/C++/Java/Python/MATLAB programming) \n Robot competitions \n \n Required Knowledge  Users should have basic knowledge of C, C++, Java, Python, or MATLAB to program robot controllers. For creating custom robot models or environments, knowledge of 3D computer graphics and VRML97 is helpful. \n User Support  Cyberbotics offers paid support services, while community support is available via: \n \n Robotics StackExchange (technical questions) \n GitHub Discussions (Webots development) \n GitHub Issues (bug reports) \n Discord (quick discussions) \n \n Webots Simulation Components \n \n World (.wbt file) – Defines robots and their environment, stored in the "worlds" directory. \n Controller Program – Controls robots, written in C/C++/Java/Python/MATLAB, stored in the "controllers" directory. \n Optional Physics Plugin – Modifies physics behavior using C/C++. \n \n Key Concepts \n \n World \xa0– A hierarchical 3D structure describing objects, their properties, and relationships. \n Controller \xa0– A program that controls robots, executed as separate processes per robot. \n Supervisor Controller \xa0– A special controller with privileged operations like simulation control and video capture. \n \n', 'tags': '', 'url': '3..html'}, {'title': '4.', 'text': '請列出上述文章中的重要的英文單字與解釋 ,  以及出現在文句中的用法 : \n \n Webots \xa0- 一款專業的移動機器人模擬軟體 \n \n \n Example: \xa0"Webots is a professional mobile robot simulation software package." \n \n \n simulation \xa0- 模擬，指在虛擬環境中再現現實世界的物理特性 \n \n \n Example: \xa0"A Webots simulation is composed of following items:" \n \n \n prototyping \xa0- 原型製作，通常用於研究或開發階段 \n \n \n Example: \xa0"Webots is well suited for research and educational projects related to mobile robotics." \n \n \n virtual \xa0- 虛擬的，非實體的 \n \n \n Example: \xa0"The user can create 3D virtual worlds with physics properties." \n \n \n physics properties \xa0- 物理屬性，如質量、摩擦力等 \n \n \n Example: \xa0"3D virtual worlds with physics properties such as mass, joints, friction coefficients, etc." \n \n \n mobile robots \xa0- 移動機器人，可以行走、移動或飛行的機器人 \n \n \n Example: \xa0"The user can add simple passive objects or active objects called mobile robots." \n \n \n locomotion \xa0- 運動方式，例如輪式、腿式或飛行方式 \n \n \n Example: \xa0"These robots can have different locomotion schemes (wheeled robots, legged robots, or flying robots)." \n \n \n sensor \xa0- 感測器，例如距離感測器、相機、觸碰感測器等 \n \n \n Example: \xa0"They may be equipped with a number of sensor and actuator devices." \n \n \n actuator \xa0- 執行器，例如馬達、驅動輪等，能讓機器人執行動作 \n \n \n Example: \xa0"They may be equipped with a number of sensor and actuator devices." \n \n \n controller \xa0- 控制器，負責控制機器人行為的程式 \n \n \n Example: \xa0"A controller is a computer program that controls a robot specified in a world file." \n \n \n Supervisor Controller \xa0- 主管控制器，擁有更高級的控制權限 \n \n \n Example: \xa0"The Supervisor controller is the controller of a Robot whose supervisor field is set to TRUE." \n \n \n interface \xa0- 介面，指軟體或硬體之間的互動方式 \n \n \n Example: \xa0"Webots also contains a number of interfaces to real mobile robots." \n \n \n world \xa0- 世界，在Webots中指包含機器人及環境的3D場景 \n \n \n Example: \xa0"A world, in Webots, is a 3D description of the properties of robots and of their environment." \n \n \n hierarchical structure \xa0- 階層結構，表示物件之間的組成關係 \n \n \n Example: \xa0"Worlds are organized as hierarchical structures where objects can contain other objects." \n \n \n VRML97 \xa0- 一種3D描述語言，Webots使用它來描述場景 \n \n \n Example: \xa0"If you don\'t want to use existing robot models...you will need a basic knowledge of 3D computer graphics and VRML97 description language." \n \n \n plugin \xa0- 外掛程式，可以擴充Webots的功能 \n \n \n Example: \xa0"An optional physics plugin that can be used to modify Webots regular physics behavior." \n \n \n robot locomotion \xa0- 機器人運動方式，例如四足機器人、仿人機器人等 \n \n \n Example: \xa0"Robot locomotion research (legged, humanoids, quadrupeds robots, etc.)." \n \n \n multi-agent \xa0- 多智能體，指多個機器人協同工作 \n \n \n Example: \xa0"Multi-agent research (swarm intelligence, collaborative mobile robots groups, etc.)." \n \n \n adaptive behavior \xa0- 適應性行為，通常涉及AI或機器學習 \n \n \n Example: \xa0"Adaptive behavior research (genetic algorithm, neural networks, AI, etc.)." \n \n \n genetic algorithm \xa0- 遺傳演算法，一種基於自然選擇的演算法 \n \n \n Example: \xa0"Adaptive behavior research (genetic algorithm, neural networks, AI, etc.)." \n \n \n neural networks \xa0- 神經網路，一種機器學習模型 \n \n \n Example: \xa0"Adaptive behavior research (genetic algorithm, neural networks, AI, etc.)." \n \n \n C/C++/Java/Python/MATLAB \xa0- Webots 支援的程式語言 \n \n \n Example: \xa0"A basic knowledge of the C, C++, Java, Python or MATLAB programming language is necessary to program your own robot controllers." \n \n \n GitHub Issues \xa0- GitHub 的問題回報系統，用來回報\xa0Webots\xa0錯誤 \n \n \n Example: \xa0"GitHub Issues should be used only to report bugs found in Webots." \n \n \n Discord \xa0- 一種即時通訊平台，可用來討論\xa0Webots \n \n \n Example: \xa0"Discord can be used for quick questions and spontaneous discussions with the Webots community." \n \n \n byte code \xa0- 位元組碼，Java\xa0需先編譯為\xa0byte code\xa0再由\xa0JVM\xa0執行 \n \n \n Example: \xa0"Java controller need to be compiled to byte code (\'.class\' files or \'.jar\') and then interpreted by a Java Virtual Machine." \n \n', 'tags': '', 'url': '4..html'}, {'title': '5.', 'text': '請詳細說明如何採手動方式在 Webots 建立下列場景: \n 1.\xa0創建世界 : 建立一個新的世界，儲存新世界。 \n 2.設置場景的環境 : 設置地面及環境背景。 \n 3.添加物體: \xa0添加靜、動態物體，調整旋轉物體位置。 \n 4. 配置機器人:\xa0 添加機器人，再進行機器人的屬性設置。 \n 5. 設定物理屬性:\xa0 點擊「Scene Tree」中的「Physics」選項，\xa0設定物體的重力、質量、摩擦係數、彈性等物理屬性。 \n 6. 設置路徑與物體交互:\xa0 \xa0手動設置機器人行駛的路徑；設定物體之間的交互規則。 \n 7.測試與調整:\xa0 點擊「 Play 」按鈕開始模擬運行，檢查場景中的物體和機器人的行為；根據需要調整物理屬性、機器人控制器、場景佈局等。 \n \n', 'tags': '', 'url': '5..html'}, {'title': '6.', 'text': '希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意? \n 要在 Webots 中透過圖形使用者介面（GUI）中的選單來建立場景，請按照以下步驟進行： \n \n \n 啟動 Webots： \xa0 首先，啟動 Webots 應用程式。 \n \n \n 創建新世界： \n \n 在主選單中，點擊「 File 」>「 New World... 」。 \n 系統會開啟一個新的空白世界。 \n \n \n \n 添加環境元素： \n \n 在左側的「 Scene Tree 」（場景樹）面板中，右鍵點擊「 root 」，選擇「 Add 」>「 Objects 」。 \n 從彈出的對話框中，選擇您想添加的環境元素，例如地面、牆壁等。 \n \n \n \n 添加機器人： \n \n 同樣在「 Scene Tree 」中，右鍵點擊「 root 」，選擇「 Add 」>「 Robot 」。 \n 從列表中選擇您想要添加的機器人模型。 \n \n \n \n 配置機器人和物件： \n \n 選中場景樹中的機器人或物件，在右側的「 Field 」面板中，可以修改其屬性，例如位置、旋轉角度等。 \n \n \n \n 保存場景： \n \n 完成場景設置後，點擊「 File 」>「 Save World As... 」，為您的場景命名並保存。 \n \n \n \n 注意事項： \n \n \n 物理屬性設置： \xa0 確保為物件設置正確的物理屬性，如質量、摩擦力等，以保證模擬的真實性。 \n \n \n 相對位置： \xa0 添加物件時，注意它們之間的相對位置，避免重疊或不合理的布局。 \n \n \n 測試場景： \xa0 在完成場景設置後，建議運行模擬，檢查機器人和物件的互動是否符合預期，並根據需要進行調整。 \n \n \n', 'tags': '', 'url': '6..html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};